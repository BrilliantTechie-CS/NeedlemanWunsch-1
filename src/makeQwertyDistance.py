#!/usr/bin/python

from math import *
import sys

if len(sys.argv) != 2:
   sys.stderr.write("Need exactly one command line argument (output file name)")
   sys.exit(1)

keyboard = """
`1234567890-=
 qwertyuiop[]
 asdfghjkl;'\\
  zxcvbnm,./"""
shifted = """
~!@#$%^&*()_+
 QWERTYUIOP{}
 ASDFGHJKL:"|
  ZXCVBNM<>?"""

shifted  = [list(l) for l in shifted.splitlines()[1:]]
keyboard = [list(l) for l in keyboard.splitlines()[1:]]

# find the position of a character on the keyboard
def findpos(c):
   for i, row in enumerate(keyboard):
      if c in row:
         return (i, row.index(c), 'k')
   for i, row in enumerate(shifted):
      if c in row:
         return (i, row.index(c), 's')
   return False

charrange = list(range(ord(' '), ord('~') + 1))

offset = 2

matrix = [ list(charrange) for n in charrange ]

for n in charrange:
   #print chr(n).ljust(2),
   for m in charrange:
      if m == ord(' ') and n == ord(' '):
         matrix[0][0] = 3
         continue
      if m == ord(' ') or n == ord(' '):
         matrix[n-ord(' ')][m-ord(' ')] = -3
         matrix[m-ord(' ')][n-ord(' ')] = -3
         continue
      N = findpos(chr(n))
      M = findpos(chr(m))
      dist = int(floor(sqrt((N[0]-M[0])**2 + (N[1]-M[1])**2)))
      if N[2] != M[2]:
         dist += 1
      matrix[m-ord(' ')][n-ord(' ')] = offset - dist
      matrix[n-ord(' ')][m-ord(' ')] = offset - dist

output = open(sys.argv[1],'w')
output.write("/* This file is automatically generated - do not edit */\n")
output.write("int qwertyDistanceSimilarity(char a, char b){\n")
output.write("    char qwertyDist[1 + '~' - ' '][1 + '~' - ' '] = {{" + ( '},\n    {'.join(','.join(str(c) for c in n) for n in matrix) ) + '}};\n')
output.write("    return qwertyDist[a-' '][b-' '];\n}\n");

output.close()

